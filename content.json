{"posts":[{"title":"Docker Containers and Kubernetes Fundamentals","text":"A good course to start working with Docker containers and Kebernetes.","link":"/Docker-Containers-and-Kubernetes-Fundamentals/"},{"title":"GAMES104 - Intro to Game Engine","text":"GAMES104 Official Page This could be one of the best introductory courses to game engine development. To be continued.","link":"/GAMES104-Intro-to-Game-Engine/"},{"title":"金融交换协议入门","text":"背景知识: TCP/UDP， 一些金融小知识，但是都不关键写在前面：这篇文章适合刚入门金融的程序员快速了解。这篇文章也是 什么是交易所？请记住下面这个数据结构的长相： 每一个交易所都要负责维护这个数据结构 Order Book. Buy(bid)代表了出价，从高到底排序。(最高出价 -&gt; 优先级最高) Sales(ask)代表了出售，从低到高排序 (最低售价 -&gt; 优先级最高) 关于Order Book 的一些逻辑： 我们喜欢出价高的，所以Buy是从高到低；相反，我们也喜欢售价低的，所以Sales是相反排序。 每个Order Book的第一行是我们最关心的，因为代表了最profitable的交易信息。 Best Buy原则上总是少于Best Sale的(如图中一样)，因为有Buy高于Sales就可以立即执行(Crossed)了。 当然，每一个Order Book 只会对应一个单一Instrument (金融商品， 详见Wiki)， 上图为APPL，苹果的股票。 每一个交易所都会维护一大串的Order Book，如下图所示: 不同的Order BookOrder Book 也有一些交易定价的不同，分为不同种类； 常见的是: (Centeral) Limit Order Book (CLOB): 可以提交一个buy/sale order到交易所, 只有在Buy(等于或小于出价) | Sale (等于或大于定价) 才能执行交易。 好处是：风险很小，唯一的风险就是没法买到/卖到(wait until expired)，并不会亏钱。 CLOB 与之相反的就是RFQ(询价)。 MidPoint Order Book (MPOB): 取中间值交易 等等… 交易所算法会鼓励Aggresive Order (Highest Buy / Lowest Sale)，最高价会拥有高优先级。 Fun Fact: 曾经有交易所会有Hidden Order Price, 只有当相同的时候才会执行Trade; 这也导致了出现了Order轮询，疯狂查询不同价格的客户端算法… Capitalism! 交易所架构:交易所架构会有很多种，就像电商网站也不止淘宝一种设计。这里我们主要以理解交易所功能为主，以一种简单(但是完全可用)的架构来大致介绍。 Source: https://www.youtube.com/watch?v=b1e4t2k2KJY 一些模块的简介可以参考图上标注。 最上面一条水平黑线，代表了一个内部网络；每一个方块都可以把它想象成一个process。理论上这完全可以在一台服务器上运行… Matching Engine(ME) 是交易发生的地方。在设计的时候需要保证deterministic(State Machine!)。Passive ME(备胎) 会与ME同时执行，deterministic会保证两者有相同输出；但是只有主ME宕机的时候，Passive才会上线开始担当重任。 MD下面的一条短黑线，代表了交易所需要广播所有的trade / order change event, 来告诉所有的客户，交易所自己维护的所有Instruments的 Order Books是如何变化的。 为什么需要协议？理论上，作为一个交易所的客户，只有知道交易所的所有Buy/Sales才能做出选择；如果存在一种完美的网络协议，能够有足够的带宽/速度，那么交易所直接就把所有的Order Books直接发给客户让客户慢慢挑选就行了。 但是互联网不是完美的 – 它很烂。 所以我们只能想想其他办法。 我们需要一个协议！ 很多Exchange都会有自己独立的协议，供客户使用。独立协议的好处是，自己能容易的定义/修改新功能，缺点就是每个交易所都有不同的协议的话，非常的碎片化。( 每个交易所都觉得我的协议最好 ) 通过协议，接收Market Data(MD)的所有message来重建交易所内部的Order Book (UDP Multicasting)。通过广播，保证了所有的client都是公平的接受到order book的更新。通常只需要几种Message就能重建Order Book了。 同时，在Port -&gt; Client的交易session中，大部分也会通过私有协议实现交易。 Source: https://www.youtube.com/watch?v=lEBiyNojTqY 一些Message流数据(来自Jane Street Presentation，或许有些陈旧): Add Orders - about 50% messages Cancel Orders - about 30% messages Cancel &amp; Replace = Add + Cancel Orders - some messages Execution - 1 ~ 2% messages And some noises 怎么看协议？互联网的设计就是分层的;不同层需要有不同的协议来支持运行,每一层都会实现某些功能来支持上层运行(校对，寻路，可靠传输，等等脏活累活)。 Luckily, 金融交易作为一种high level的应用，有了其他层的支持，我们只需要在最高一层进行交易协议的实现。 Fix金融资讯交换协定 - Wikipedia FIX作为一种通用协议，包含两个set of messages: Session Layer Message主要作为信息传递 Logon 登陆 Logoff 登出 Heartbeat 心跳 (保持连接) Session Level Reject Business Level Reject … Application Layer Message主要为业务处理 New Order Order Cancel Request Quote Request Mass Quote Mass Quote Cancel Quote Cancel Exec Report - Fill Notice Exec Report - Elimination Security Definition New Order Cross Order Status Request Security Definition Request TBD… Citation: Coding Jesus - Youtube How to build an exchange - Jane Street","link":"/FIX-Protocol/"},{"title":"Weekly Digest 10-15-2022","text":"FIX Protocol Docker Containers and Kubernetes Fundamentals LGD 真不行… Some Hexo setup guide in this page:Hexo Include Guitar Section:I'm Yours Strumming &amp; Muting","link":"/Weekly-Digest-10-15-2022/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"GAME_DEV","slug":"GAME-DEV","link":"/tags/GAME-DEV/"},{"name":"GAME_ENGINE","slug":"GAME-ENGINE","link":"/tags/GAME-ENGINE/"}],"categories":[{"name":"TECH_BLOG","slug":"TECH-BLOG","link":"/categories/TECH-BLOG/"}],"pages":[{"title":"Navigator","text":"Some Navigator Link that I love. Frontend Dev:中国传统色卡","link":"/Navigator/index.html"},{"title":"Books To Read","text":"Books on my radar: Clean Code Design Data Intensive Applications 中国国家治理的制度逻辑 CSAPP Lilian Weng’s Blog Options, Futures, And Other Derivatives","link":"/Books-To-Read/index.html"},{"title":"About Myself","text":"Chengyao ZouA junior C++ developer myself. cz5@duck.com | My Github page CurrentlyGraduate Software Developer @ A Prop Trading Firm Specialized inBeginner in C++ Ultra Low Latency, Template Metaprogramming.Basic Circuit Design &amp; Signal Processing.And also video games. InterestsEh… Education2016.8 - 2020.5University of Illinois at Urbana-Champaign, IllinoisBSc in Computer Engineering 2020.10 - 2021.11University of Edinburgh, ScotlandMSc in Computer Science","link":"/CURRICULUM/index.html"}]}